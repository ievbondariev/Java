DZ4

1. Создаем структуру папок в папке Вашей домашней работы:
1.1. параллельно друг другу создать несколько папок: ‘entities’, ‘exceptions’, ‘services’, ‘utils’;

2. В папке ‘entities’ создать один класс-сущность: Клиент. И прописать поля:
2.1. Строковое значение: идентификатор клиента;
2.2. Строковое значение: Фамилия;
2.3. Строковое значение: Идентификатор Аккаунта клиента;
2.4. Дробное значение: Сумма

3. В папке ‘exceptions’ создать 3 своих ошибки для дальнейшей логики:
3.1. UserExpectedError(должна быть Unchecked);
3.2. WrongFieldException(должна быть Checked);
3.3. WrongSumException(должна быть Checked);

4. В папке ‘utils’ создать Класс-хелпер для проверки параметров:
4.1. Метод 1: Входящим параметром принимает Идентификатор Аккаунта клиента и ничего не возвращает. Проверяет, чтобы размер переданного параметра был равен 10, в случае несоответствия бросал ошибку WrongFieldException;
4.2. Метод 2: На вход принимает Сумму и ничего не возвращает. Если переданная сумма больше 1000, то бросает ошибку WrongSumException;
4.3. Метод 3: На вход принимает 2 параметра (Идентификатор Аккаунта клиента который отправляет и Идентификатор Аккаунта клиента которому отправляют перевод) и ничего не возвращает. Если эти два параметра между собой не равны, то бросаем ошибку UserExpectedError(сделано для упрощения логики).

5. В папке ‘services’ создаем класс Сервис Транзакций, внутри которого создаем один метод: Передача Денег. Этот метод на вход принимает 2 параметра (сущность Клиент и Идентификатор Аккаунта клиента) и ничего не возвращает. Внутри идет вызов созданного Класса-хелпера, метода 3.

6. Далее создаем класс Main (параллельно созданным ранее папкам) и прописываем следующую логику:
6.1. С помощью класса Scanner, который помогает ввести данные с клавиатуры, попросить пользователя ввести Идентификатор Аккаунта клиента. После чего вызвать Класс-хелпер(метод 1) и передать этот параметр для валидации. Обработать потенциальную ошибку и в случае ошибки уведомить, что данные введены не корректно и попросить ввести значение снова. Пока клиент не введет корректное значение, программа должна его запрашивать. (Это поле нашего Клиента: Идентификатор Аккаунта клиента);
6.2. Далее схожим образом попросить пользователя ввести Идентификатор Аккаунта клиента, на который потенциально будет выполняться перевод, так же провалидировать, отреагировать на ошибку и запрашивать пока данные не будут введены корректно. (Это Идентификатор Аккаунта клиента, который будет передан далее отдельно);
6.3. И третьим параметром просить ввести сумму перевода, вызвать Класс-хелпер(метод 2) для проверки суммы перевода и передать параметр суммы. Обработать схожим образом потенциальную ошибку и запрашивать ввести корректное значение пока пользователь не введет необходимое. (Это поле Клиента: Сумма);
6.4. И финально вызвать ранее созданные класс Сервиса с методом Передачи Денег. Обрабатывать ошибку не надо, в случае ошибки программа просто должна падать с ранее созданной ошибкой UserExpectedError. После вызова уведомить об успешном переводе средств.

4. В папке ‘utils’ создать Класс-хелпер для проверки параметров:

4.1. Метод 1: Входящим параметром принимает Идентификатор Аккаунта клиента и ничего не возвращает. Проверяет, чтобы размер переданного параметра был равен 10, в случае несоответствия бросал ошибку WrongFieldException;

4.2. Метод 2: На вход принимает Сумму и ничего не возвращает. Если переданная сумма больше 1000, то бросает ошибку WrongSumException;

4.3. Метод 3: На вход принимает 2 параметра (Идентификатор Аккаунта клиента который отправляет и Идентификатор Аккаунта клиента которому отправляют перевод) и ничего не возвращает. Если эти два параметра между собой равны, то бросаем ошибку UserExpectedError(сделано для упрощения логики).

методы, которые бросают checked exceptions не знают как обрабатывать эти ошибки, это должен сделать кто-то другой ???

Client client = new Client();
Helper helper = new Helper();
Scanner scanner = new Scanner(System.in);
boolean valid = true;

do {
    System.out.println("Please enter senders account: ");
    String sendersAccount = scanner.nextLine();
    try {
        helper.checkAccountLength(sendersAccount);
    } catch (WrongFieldException e) {
        e.printStackTrace();
        valid = false;
    }
} while (!valid);

valid = true;